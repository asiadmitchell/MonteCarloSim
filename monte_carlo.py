import matplotlib.pyplot as plt
from scipy import stats
import numpy as np
from collections import defaultdict
import sys, os, string


## Number of simulations to run
ITERATIONS = 2500
## Number of counted radials in experimental data
COUNTS = 203
## Chromosome range. Autosomes are numbered accordingly
## X = 23 and Y = 24
RANGE = [1,2,3,4,5,6,7,8,9,10,11,12,13,
         14,15,16,17,18,19,20,21,22,23,24]
## Chromosome sizes in basepairs. 1-22, X and Y.
CHROM = [249250621, 243199373, 198022430, 191154276, 180915260, 171115067,
         159138663, 146364022, 141213431, 135534747, 135006516, 133851895,
         115169878, 107349540, 102531392, 90354753, 81195210, 78077248,
         59128983, 63025520, 48129895, 51304566, 155270560, 59373566]
## Genome size.
GENOME = float(sum(CHROM))
GENOME += float(sum(CHROM[:22]))


## Chromosome size as percentage of genome. 1-22, X and Y.
distribution = []
for indx,x in enumerate(CHROM):
    if indx < 22:
        x = float(x*2)
    distribution.append(float(x)/GENOME)

## Import data file contain observed radial counts.
## Column 1 = DEB observed radials
## Column 2 = MMC observed radials
##
## Convert counts to frequencies
infile = open('/Users/mitcheas/Documents/MMG/Nicole Owen/Radials_total.txt', 'U')
data = infile.readlines()
DEB = []
MMC = []
for line in data:
    line = string.rstrip(line)
    line = string.split(line, '\t')
    DEB.append(int(line[0]))
    MMC.append(int(line[1]))
##DEBsum = sum(DEB)
##MMCsum = sum(MMC)
##for indx, i in enumerate(DEB):
##    DEB[indx] = i/DEBsum
##for indx, i in enumerate(MMC):
##    MMC[indx] = i/MMCsum

## Monte Carlo Simulations. Generate random numbers based on
## genome probability distribution.
##
## random = your numbers generated by Monte Carlo simulation
## observed = frequencies from DEB or MMC experiments
## expected = frequencies generated by Monte Carlo 

expected = defaultdict(int)
for i in RANGE:
   expected[i] = []

observed = []

custm = stats.rv_discrete(name='custm', values=(RANGE, distribution))
random = custm.rvs(size=COUNTS)
for i in range(0, ITERATIONS):
    random = custm.rvs(size=COUNTS)
    temp = defaultdict(int)
    for i in RANGE:
        temp[i] = 0
    for i in random:
        temp[i] +=1
    for x in temp:
        expected[x].append(temp[x])


## Perform student t-test comparing observed radial count
## for each chromosome with mean of expected radial count
for chrom in range(0, len(RANGE)):
    dist = []
    dist = expected[chrom+1]
    dist.append(MMC[chrom])
    z = stats.zscore(dist)
    pval = stats.norm.sf(z)*2
    mmc = MMC[chrom]
    if chrom > 21:
        if chrom == 22:
            chrom = 'X'
        if chrom == 23:
            chrom = 'Y'
    else:
        chrom +=1
    print "MMC ", chrom, mmc, np.mean(dist), ITERATIONS, '0.05', pval[-1]
for chrom in range(0, len(RANGE)):
    dist = []
    dist = expected[chrom+1]
    dist.append(DEB[chrom])
    z = stats.zscore(dist)
    pval = stats.norm.sf(z)*2
    deb = DEB[chrom]
    if chrom > 21:
        if chrom == 22:
            chrom = 'X'
        if chrom == 23:
            chrom = 'Y'
    else:
        chrom +=1
    print "DEB ", chrom, deb, np.mean(dist), ITERATIONS, '0.05', pval[-1]

##d = defaultdict(int)
##for i in RANGE:
##    d[i] = 0
##for i in random:
##    d[i] +=1

##for i in sorted(d.keys()):
## ##   expected.append(float(d[i])/float(ITERATIONS))
##    expected.append(float(d[i]))
##expected = np.array(expected)
##
##for i in CHROM[:22]:
##    observed.append(float(i*2))
##observed.append(float(CHROM[22]))
##observed.append(float(CHROM[23]))
##observed = np.array(observed)
##
##test = [float]
##test = [10, 10, 12, 13, 50, 35, 12, 17, 50, 11, 10, 23,
##        33, 41, 14, 6, 11, 20, 5, 90, 22, 300, 10, 9]
##test = np.array(test)
##
#### Chi Square analysis of observed vs expected frequencies
##x = stats.chisquare(DEB, expected)
##print "DEB: ", ITERATIONS, x
##x = stats.chisquare(MMC, expected)
##print "MMC: ", ITERATIONS, x
##x = stats.chisquare(observed, observed)
##print "Normal: ", ITERATIONS, x
##x = stats.chisquare(test, expected)
##print "TEST: ", ITERATIONS, x
